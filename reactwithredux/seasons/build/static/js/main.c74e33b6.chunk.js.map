{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","Summer","text","iconName","Winter","SeasonDisplay","props","lat","month","Season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","error","console","log","this","renderContent","React","Component","ReactDom","render","document","querySelector"],"mappings":"8MAGMA,EAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,cAuBCE,EAZO,SAACC,GACrB,IARiBC,EAAKC,EAQhBC,GARWF,EAQQD,EAAMC,IARTC,GAQc,IAAIE,MAAOC,WAP3CJ,EAAM,EACDC,EAAQ,GAAKA,EAAQ,EAAI,SAAW,SAEtCA,EAAQ,GAAKA,EAAQ,EAAI,SAAW,UAK3C,EAA2BR,EAAaS,GAAhCP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SACd,OACE,sBAAKS,UAAS,yBAAoBH,GAAlC,UACE,mBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC1BZU,EAAU,SAACP,GACf,OACE,qBAAKM,UAAU,mBAAf,SACE,qBAAKA,UAAU,qBAAf,SAAqCN,EAAMQ,aAKjDD,EAAQE,aAAe,CACrBD,QAAS,cAEID,Q,ICJTG,E,kDACJ,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAGDW,MAAQ,CAAEV,IAAK,KAAMW,aAAc,IAJvB,E,qDAQnB,WAAqB,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAEC,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cAEvC,SAACC,GACC,EAAKH,SAAS,CAAEN,aAAcS,EAAMb,e,gCAI1C,WACEc,QAAQC,IAAI,2B,2BAGd,WACE,OAAIC,KAAKb,MAAMC,eAAiBY,KAAKb,MAAMV,IAClC,0CAAauB,KAAKb,MAAMC,iBAE5BY,KAAKb,MAAMC,cAAgBY,KAAKb,MAAMV,IAClC,cAAC,EAAD,CAAeA,IAAKuB,KAAKb,MAAMV,MAEjC,cAAC,EAAD,CAASO,QAAQ,qC,oBAG1B,WACE,OAAO,qBAAKF,UAAU,aAAf,SAA6BkB,KAAKC,sB,GAnC3BC,IAAMC,WAuCxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.c74e33b6.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\r\nimport React from \"react\";\r\n\r\nconst seasonConfig = {\r\n  Summer: {\r\n    text: \"Let's hit the beach!\",\r\n    iconName: \"sun\",\r\n  },\r\n  Winter: {\r\n    text: \"Burr, it is chilly\",\r\n    iconName: \"snowflake\",\r\n  },\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (lat > 0) {\r\n    return month < 3 || month > 8 ? \"Winter\" : \"Summer\";\r\n  }\r\n  return month < 3 || month > 8 ? \"Summer\" : \"Winter\";\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n  const Season = getSeason(props.lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[Season];\r\n  return (\r\n    <div className={`season-display ${Season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: \"Loading...\",\r\n};\r\nexport default Spinner;\r\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); //make sure constructor react.component runs\n\n    //only time a direct assignmet is done to state\n    this.state = { lat: null, errorMessage: \"\" };\n  }\n  //componentDidMount(){}/componentDidUpdate(){}\n  //shouldComponentUpdate/getDerivedStateFromProps/getSnapshotBeforeUpdate\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => {\n        //We need to call setstate\n        this.setState({ lat: position.coords.latitude });\n      },\n      (error) => {\n        this.setState({ errorMessage: error.message });\n      }\n    );\n  }\n  componentDidUpdate() {\n    console.log(\"My component updated!\");\n  }\n\n  renderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    }\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n    return <Spinner message=\"Please accept location request\" />;\n  }\n  //React says we need to define render!!\n  render() {\n    return <div className=\"border red\">{this.renderContent()}</div>;\n  }\n}\n\nReactDom.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}